
import { GoogleGenAI, Modality } from "@google/genai";
import type { Character, Context } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const base64ToPart = (base64String: string) => {
    const match = base64String.match(/^data:(image\/\w+);base64,(.*)$/);
    if (!match) throw new Error("Invalid base64 string for image");
    return {
        inlineData: {
            mimeType: match[1],
            data: match[2],
        },
    };
};

export const generateImageFromPrompt = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/png',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image from prompt:", error);
        throw error;
    }
};

export const generateConsistentImage = async (
    characters: Character[],
    context: Context,
    userPrompt: string,
    style: string
): Promise<string | null> => {
    if (!context.imageSrc) {
        throw new Error("Context image is required.");
    }

    const characterParts = characters
        .filter(c => c.imageSrc)
        .map(c => base64ToPart(c.imageSrc!));

    const contextPart = base64ToPart(context.imageSrc);

    const fullPrompt = `Sử dụng ${characters.length} ảnh nhân vật và một ảnh bối cảnh đã cung cấp. Tạo một ảnh mới dựa trên mô tả sau: "${userPrompt}". Các nhân vật trong ảnh mới phải đồng nhất với ảnh tham chiếu. Đặt chúng vào trong bối cảnh đã cho. Ảnh cuối cùng phải theo phong cách ${style}. Chú ý đến tỷ lệ, tỉ lệ, ánh sáng và góc nhìn thực tế để đảm bảo các nhân vật phù hợp tự nhiên với môi trường. Ảnh phải có độ phân giải cao.`;

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [
                    ...characterParts,
                    contextPart,
                    { text: fullPrompt },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes = part.inlineData.data;
                const mimeType = part.inlineData.mimeType;
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }
        }
        return null; 
    } catch (error) {
        console.error("Error generating consistent image:", error);
        throw error;
    }
};
